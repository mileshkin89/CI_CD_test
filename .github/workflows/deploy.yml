name: Build-Test-Push and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: ci_cd_test
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  build_test_push:
    name: Build and Push Image
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set image tag
      id: set_tag
      run: |
        TAG=$(date +'%Y%m%d%H%M%S')
        FULL_TAG="$DOCKERHUB_USER/$IMAGE_NAME:$TAG"
        echo "image_tag=$FULL_TAG" >> $GITHUB_OUTPUT
        echo "Using tag: $FULL_TAG"

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "$DOCKERHUB_USER" --password-stdin

    - name: Build and push
      run: |
        docker build -t ${{ steps.set_tag.outputs.image_tag }} .
        docker push ${{ steps.set_tag.outputs.image_tag }}
        

  deploy:
    name: Deploy to EC2
    needs: build_test_push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
          set -e
          cd /home/ubuntu/src/CI_CD_test/
          
          echo "Updating to: ${{ needs.build_test_push.outputs.image_tag }}"
          
          # Проверка существования файла
          if [ ! -f "docker-compose-prod.yml" ]; then
            echo "Error: docker-compose-prod.yml not found!"
            exit 1
          fi
          
          # Обновление образа
          sed -i "s|image: .*|image: ${{ needs.build_test_push.outputs.image_tag }}|" docker-compose-prod.yml
          
          # Проверка изменений
          echo "Updated compose file:"
          grep "image:" docker-compose-prod.yml
          
          # Перезапуск сервиса
          docker compose -f docker-compose-prod.yml down --remove-orphans || true
          docker compose -f docker-compose-prod.yml pull
          docker compose -f docker-compose-prod.yml up -d
        EOF
#jobs:
#  build_test_push:
#    name: Build, Test and Push Docker Image
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout repo
#      uses: actions/checkout@v4
#
#    - name: Set dynamic tag
#      id: set_tag
#      run: |
#        TAG=$(date +'%Y%m%d%H%M%S')
#        echo "tag=${TAG}" >> $GITHUB_OUTPUT
#        echo "IMAGE_TAG=${DOCKERHUB_USER}/${IMAGE_NAME}:${TAG}" >> $GITHUB_OUTPUT
#
#    - name: Log in to Docker Hub
#      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin
#
#    - name: Build Docker image
#      run: docker build -t ${{ steps.set_tag.outputs.IMAGE_TAG }} .
#
#
#    - name: Debug output
#      run: |
#        echo "Tag: ${{ steps.set_tag.outputs.tag }}"
#        echo "Image tag: ${{ steps.set_tag.outputs.IMAGE_TAG }}"
#
#    - name: Test Docker image
#      run: docker run --rm ${{ steps.set_tag.outputs.IMAGE_TAG }}
#
#    - name: Push image to DockerHub
#      run: docker push ${{ steps.set_tag.outputs.IMAGE_TAG }}
#
#    - name: Save image tag
#      run: echo "IMAGE_TAG=${{ steps.set_tag.outputs.IMAGE_TAG }}" >> $GITHUB_ENV
#
#  deploy:
#    name: Deploy to EC2
#    needs: build_test_push
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout repo
#      uses: actions/checkout@v4
#
#    - name: Set up SSH key
#      run: |
#        mkdir -p ~/.ssh
#        echo "${{ secrets.EC2_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
#        chmod 600 ~/.ssh/id_rsa
#        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
#
#    - name: Get image tag from previous job
#      id: get_tag
#      run: |
#        echo "tag=${{ needs.build_test_push.outputs.tag }}" >> $GITHUB_OUTPUT
#        echo "IMAGE_TAG=${{ needs.build_test_push.outputs.IMAGE_TAG }}" >> $GITHUB_OUTPUT
#
#    - name: Fix permissions
#      run: |
#        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
#          "sudo chown ubuntu:ubuntu /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml && \
#           chmod 644 /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml"
#
#    - name: Deploy to EC2
#      run: |
#        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'DEPLOY_EOF'
#          set -e
#          cd /home/ubuntu/src/CI_CD_test/
#
#          echo "Updating image to: ${{ steps.get_tag.outputs.IMAGE_TAG }}"
#          sed -i "s|image: .*|image: ${{ steps.get_tag.outputs.IMAGE_TAG }}|" docker-compose-prod.yml
#
#          docker compose -f docker-compose-prod.yml down --remove-orphans || true
#          docker compose -f docker-compose-prod.yml pull
#          docker compose -f docker-compose-prod.yml up -d
#        DEPLOY_EOF