name: Build-Test-Push and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: ci_cd_test
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  build_test_push:
    name: Build, Test and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set dynamic tag (timestamp)
      run: |
        echo "TAG=${IMAGE_NAME}:$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
        echo "IMAGE_TAG=${DOCKERHUB_USER}:${IMAGE_NAME}:$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin

    - name: Build Docker image
      run: docker build -t $DOCKERHUB_USER/$TAG .

    - name: Test Docker image
      run: docker run --rm $DOCKERHUB_USER/$TAG

#    - name: Test Docker container
#      run: |
#        docker run -d --rm --name test_container $DOCKERHUB_USER/$TAG
#        sleep 5
#        docker logs test_container
#        docker stop test_container

    - name: Push image to DockerHub
      run: docker push $DOCKERHUB_USER/$TAG

    - name: Export image tag
      run: echo "IMAGE_TAG=$DOCKERHUB_USER/$TAG" >> $GITHUB_ENV

  deploy:
    name: Deploy to EC2
    needs: build_test_push
    runs-on: ubuntu-latest

    steps:
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy with IMAGE_TAG
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "IMAGE_TAG=$IMAGE_TAG bash -s" << 'EOF'
            echo "Inside: IMAGE_TAG=$IMAGE_TAG"
            sed -i "s|image: .*|image: $IMAGE_TAG|" /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml
            docker compose -f /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml down --remove-orphans || true
            docker compose -f /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml pull
            docker compose -f /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml up -d
        EOF

#    - name: Deploy to EC2
#      run: |
#        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
#          set -e
#
#          IMAGE_TAG="${{ env.IMAGE_TAG }}"
#
#          echo "DEBUG: IMAGE_TAG=\$IMAGE_TAG"
#
#          echo "ðŸ“¦ Updating image in docker-compose-prod.yml..."
#          sed -i "s|image: .*|image: \$IMAGE_TAG|" /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml
#
#          echo "ðŸ§¹ Stopping existing container..."
#          docker compose -f /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml down --remove-orphans || true
#
#          echo "ðŸ“¥ Pulling updated image..."
#          docker compose -f /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml pull
#
#          echo "ðŸš€ Starting updated container..."
#          docker compose -f /home/ubuntu/src/CI_CD_test/docker-compose-prod.yml up -d
#        EOF
    
